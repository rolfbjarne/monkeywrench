//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 
namespace MonkeyWrench.Web.WebServices {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    using MonkeyWrench.DataClasses;
    using MonkeyWrench.DataClasses.Logic;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServicesSoap", Namespace="http://monkeywrench.novell.com/")]
    public partial class WebServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public WebServices() {
            this.Url = "http://localhost:8123/WebServices/WebServices.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetRoles", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetRoles(string user) {
            object[] results = this.Invoke("GetRoles", new object[] {
                        user});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRoles(string user, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRoles", new object[] {
                        user}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/LoginOpenId", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LoginResponse LoginOpenId(WebServiceLogin login, string email, string ip4) {
            object[] results = this.Invoke("LoginOpenId", new object[] {
                        login,
                        email,
                        ip4});
            return ((LoginResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLoginOpenId(WebServiceLogin login, string email, string ip4, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoginOpenId", new object[] {
                        login,
                        email,
                        ip4}, callback, asyncState);
        }
        
        /// <remarks/>
        public LoginResponse EndLoginOpenId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LoginResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/Login", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LoginResponse Login([System.Xml.Serialization.XmlElementAttribute("login")] WebServiceLogin login1) {
            object[] results = this.Invoke("Login", new object[] {
                        login1});
            return ((LoginResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogin(WebServiceLogin login1, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Login", new object[] {
                        login1}, callback, asyncState);
        }
        
        /// <remarks/>
        public LoginResponse EndLogin(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LoginResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/Logout", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logout(WebServiceLogin login) {
            this.Invoke("Logout", new object[] {
                        login});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLogout(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Logout", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLogout(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/CreateLanefile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateLanefile(WebServiceLogin login, int lane_id, string filename) {
            this.Invoke("CreateLanefile", new object[] {
                        login,
                        lane_id,
                        filename});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateLanefile(WebServiceLogin login, int lane_id, string filename, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateLanefile", new object[] {
                        login,
                        lane_id,
                        filename}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateLanefile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AttachFileToLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AttachFileToLane(WebServiceLogin login, int lane_id, int lanefile_id) {
            this.Invoke("AttachFileToLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAttachFileToLane(WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AttachFileToLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAttachFileToLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeattachFileFromLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeattachFileFromLane(WebServiceLogin login, int lane_id, int lanefile_id) {
            this.Invoke("DeattachFileFromLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeattachFileFromLane(WebServiceLogin login, int lane_id, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeattachFileFromLane", new object[] {
                        login,
                        lane_id,
                        lanefile_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeattachFileFromLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommand", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommand(WebServiceLogin login, DBCommand command) {
            this.Invoke("EditCommand", new object[] {
                        login,
                        command});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommand(WebServiceLogin login, DBCommand command, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommand", new object[] {
                        login,
                        command}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommand(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandFilename", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandFilename(WebServiceLogin login, int command_id, string filename) {
            this.Invoke("EditCommandFilename", new object[] {
                        login,
                        command_id,
                        filename});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommandFilename(WebServiceLogin login, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommandFilename", new object[] {
                        login,
                        command_id,
                        filename}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommandFilename(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandSequence", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandSequence(WebServiceLogin login, int command_id, int sequence) {
            this.Invoke("EditCommandSequence", new object[] {
                        login,
                        command_id,
                        sequence});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommandSequence(WebServiceLogin login, int command_id, int sequence, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommandSequence", new object[] {
                        login,
                        command_id,
                        sequence}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommandSequence(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandArguments", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandArguments(WebServiceLogin login, int command_id, string arguments) {
            this.Invoke("EditCommandArguments", new object[] {
                        login,
                        command_id,
                        arguments});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommandArguments(WebServiceLogin login, int command_id, string arguments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommandArguments", new object[] {
                        login,
                        command_id,
                        arguments}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommandArguments(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandTimeout", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandTimeout(WebServiceLogin login, int command_id, int timeout) {
            this.Invoke("EditCommandTimeout", new object[] {
                        login,
                        command_id,
                        timeout});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommandTimeout(WebServiceLogin login, int command_id, int timeout, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommandTimeout", new object[] {
                        login,
                        command_id,
                        timeout}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommandTimeout(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandWorkingDirectory", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandWorkingDirectory(WebServiceLogin login, int command_id, string working_directory) {
            this.Invoke("EditCommandWorkingDirectory", new object[] {
                        login,
                        command_id,
                        working_directory});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommandWorkingDirectory(WebServiceLogin login, int command_id, string working_directory, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommandWorkingDirectory", new object[] {
                        login,
                        command_id,
                        working_directory}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommandWorkingDirectory(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditCommandUploadFiles", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditCommandUploadFiles(WebServiceLogin login, int command_id, string upload_files) {
            this.Invoke("EditCommandUploadFiles", new object[] {
                        login,
                        command_id,
                        upload_files});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditCommandUploadFiles(WebServiceLogin login, int command_id, string upload_files, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditCommandUploadFiles", new object[] {
                        login,
                        command_id,
                        upload_files}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditCommandUploadFiles(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchCommandNonFatal", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchCommandNonFatal(WebServiceLogin login, int command_id) {
            this.Invoke("SwitchCommandNonFatal", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSwitchCommandNonFatal(WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SwitchCommandNonFatal", new object[] {
                        login,
                        command_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSwitchCommandNonFatal(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchCommandAlwaysExecute", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchCommandAlwaysExecute(WebServiceLogin login, int command_id) {
            this.Invoke("SwitchCommandAlwaysExecute", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSwitchCommandAlwaysExecute(WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SwitchCommandAlwaysExecute", new object[] {
                        login,
                        command_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSwitchCommandAlwaysExecute(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchCommandInternal", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchCommandInternal(WebServiceLogin login, int command_id) {
            this.Invoke("SwitchCommandInternal", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSwitchCommandInternal(WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SwitchCommandInternal", new object[] {
                        login,
                        command_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSwitchCommandInternal(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteCommand", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCommand(WebServiceLogin login, int command_id) {
            this.Invoke("DeleteCommand", new object[] {
                        login,
                        command_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCommand(WebServiceLogin login, int command_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCommand", new object[] {
                        login,
                        command_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCommand(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddCommand", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddCommand(WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence) {
            this.Invoke("AddCommand", new object[] {
                        login,
                        lane_id,
                        command,
                        always_execute,
                        nonfatal,
                        timeout,
                        sequence});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCommand(WebServiceLogin login, int lane_id, string command, bool always_execute, bool nonfatal, int timeout, int sequence, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCommand", new object[] {
                        login,
                        lane_id,
                        command,
                        always_execute,
                        nonfatal,
                        timeout,
                        sequence}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddCommand(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchHostEnabledForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchHostEnabledForLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("SwitchHostEnabledForLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSwitchHostEnabledForLane(WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SwitchHostEnabledForLane", new object[] {
                        login,
                        lane_id,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSwitchHostEnabledForLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/SwitchHostHiddenForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SwitchHostHiddenForLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("SwitchHostHiddenForLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSwitchHostHiddenForLane(WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SwitchHostHiddenForLane", new object[] {
                        login,
                        lane_id,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSwitchHostHiddenForLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveHostForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveHostForLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("RemoveHostForLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveHostForLane(WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveHostForLane", new object[] {
                        login,
                        lane_id,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveHostForLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddHostToLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddHostToLane(WebServiceLogin login, int lane_id, int host_id) {
            this.Invoke("AddHostToLane", new object[] {
                        login,
                        lane_id,
                        host_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddHostToLane(WebServiceLogin login, int lane_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHostToLane", new object[] {
                        login,
                        lane_id,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddHostToLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddDependencyToLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDependencyToLane(WebServiceLogin login, int lane_id, int dependent_lane_id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, DBLaneDependencyCondition condition) {
            this.Invoke("AddDependencyToLane", new object[] {
                        login,
                        lane_id,
                        dependent_lane_id,
                        host_id,
                        condition});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDependencyToLane(WebServiceLogin login, int lane_id, int dependent_lane_id, System.Nullable<int> host_id, DBLaneDependencyCondition condition, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDependencyToLane", new object[] {
                        login,
                        lane_id,
                        dependent_lane_id,
                        host_id,
                        condition}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddDependencyToLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneDependencyFilename", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneDependencyFilename(WebServiceLogin login, int lanedependency_id, string filename) {
            this.Invoke("EditLaneDependencyFilename", new object[] {
                        login,
                        lanedependency_id,
                        filename});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditLaneDependencyFilename(WebServiceLogin login, int lanedependency_id, string filename, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditLaneDependencyFilename", new object[] {
                        login,
                        lanedependency_id,
                        filename}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditLaneDependencyFilename(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteLaneDependency", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLaneDependency(WebServiceLogin login, int lanedependency_id) {
            this.Invoke("DeleteLaneDependency", new object[] {
                        login,
                        lanedependency_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteLaneDependency(WebServiceLogin login, int lanedependency_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteLaneDependency", new object[] {
                        login,
                        lanedependency_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteLaneDependency(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneDependencyDownloads", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneDependencyDownloads(WebServiceLogin login, int lanedependency_id, string downloads) {
            this.Invoke("EditLaneDependencyDownloads", new object[] {
                        login,
                        lanedependency_id,
                        downloads});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditLaneDependencyDownloads(WebServiceLogin login, int lanedependency_id, string downloads, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditLaneDependencyDownloads", new object[] {
                        login,
                        lanedependency_id,
                        downloads}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditLaneDependencyDownloads(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UnlinkDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlinkDeletionDirective(WebServiceLogin login, int directive_id) {
            this.Invoke("UnlinkDeletionDirective", new object[] {
                        login,
                        directive_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnlinkDeletionDirective(WebServiceLogin login, int directive_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnlinkDeletionDirective", new object[] {
                        login,
                        directive_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnlinkDeletionDirective(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDeletionDirective(WebServiceLogin login, int lane_directive_id, int file_directive_id) {
            this.Invoke("DeleteDeletionDirective", new object[] {
                        login,
                        lane_directive_id,
                        file_directive_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDeletionDirective(WebServiceLogin login, int lane_directive_id, int file_directive_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDeletionDirective", new object[] {
                        login,
                        lane_directive_id,
                        file_directive_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteDeletionDirective(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EnableDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EnableDeletionDirective(WebServiceLogin login, int lane_deletion_directive_id, bool enabled) {
            this.Invoke("EnableDeletionDirective", new object[] {
                        login,
                        lane_deletion_directive_id,
                        enabled});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnableDeletionDirective(WebServiceLogin login, int lane_deletion_directive_id, bool enabled, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnableDeletionDirective", new object[] {
                        login,
                        lane_deletion_directive_id,
                        enabled}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEnableDeletionDirective(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddFileDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddFileDeletionDirective(WebServiceLogin login, string filename, string name, DBMatchMode match_mode, int x, DBDeleteCondition condition) {
            object[] results = this.Invoke("AddFileDeletionDirective", new object[] {
                        login,
                        filename,
                        name,
                        match_mode,
                        x,
                        condition});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddFileDeletionDirective(WebServiceLogin login, string filename, string name, DBMatchMode match_mode, int x, DBDeleteCondition condition, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddFileDeletionDirective", new object[] {
                        login,
                        filename,
                        name,
                        match_mode,
                        x,
                        condition}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddFileDeletionDirective(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddLaneDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddLaneDeletionDirective(WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            object[] results = this.Invoke("AddLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLaneDeletionDirective(WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddLaneDeletionDirective(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLaneDeletionDirective", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DBLaneDeletionDirectiveView FindLaneDeletionDirective(WebServiceLogin login, int file_deletion_directive_id, int lane_id) {
            object[] results = this.Invoke("FindLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id});
            return ((DBLaneDeletionDirectiveView)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindLaneDeletionDirective(WebServiceLogin login, int file_deletion_directive_id, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindLaneDeletionDirective", new object[] {
                        login,
                        file_deletion_directive_id,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public DBLaneDeletionDirectiveView EndFindLaneDeletionDirective(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DBLaneDeletionDirectiveView)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLaneResponse GetLane(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("GetLane", new object[] {
                        login,
                        lane_id});
            return ((GetLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLane(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLane", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetLaneResponse EndGetLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetWorkHostHistory", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetWorkHostHistoryResponse GetWorkHostHistory(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, int limit, int offset) {
            object[] results = this.Invoke("GetWorkHostHistory", new object[] {
                        login,
                        host_id,
                        host,
                        limit,
                        offset});
            return ((GetWorkHostHistoryResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWorkHostHistory(WebServiceLogin login, System.Nullable<int> host_id, string host, int limit, int offset, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWorkHostHistory", new object[] {
                        login,
                        host_id,
                        host,
                        limit,
                        offset}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetWorkHostHistoryResponse EndGetWorkHostHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetWorkHostHistoryResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetHostForEdit", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHostForEditResponse GetHostForEdit(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host) {
            object[] results = this.Invoke("GetHostForEdit", new object[] {
                        login,
                        host_id,
                        host});
            return ((GetHostForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostForEdit(WebServiceLogin login, System.Nullable<int> host_id, string host, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostForEdit", new object[] {
                        login,
                        host_id,
                        host}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetHostForEditResponse EndGetHostForEdit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetHostForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddMasterHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddMasterHost(WebServiceLogin login, int host_id, int masterhost_id) {
            this.Invoke("AddMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddMasterHost(WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddMasterHost(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveMasterHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveMasterHost(WebServiceLogin login, int host_id, int masterhost_id) {
            this.Invoke("RemoveMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveMasterHost(WebServiceLogin login, int host_id, int masterhost_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveMasterHost", new object[] {
                        login,
                        host_id,
                        masterhost_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveMasterHost(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLaneForEdit", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLaneForEditResponse GetLaneForEdit(WebServiceLogin login, int lane_id, string lane) {
            object[] results = this.Invoke("GetLaneForEdit", new object[] {
                        login,
                        lane_id,
                        lane});
            return ((GetLaneForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLaneForEdit(WebServiceLogin login, int lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLaneForEdit", new object[] {
                        login,
                        lane_id,
                        lane}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetLaneForEditResponse EndGetLaneForEdit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetLaneForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindHostResponse FindHost(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host) {
            object[] results = this.Invoke("FindHost", new object[] {
                        login,
                        host_id,
                        host});
            return ((FindHostResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindHost(WebServiceLogin login, System.Nullable<int> host_id, string host, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindHost", new object[] {
                        login,
                        host_id,
                        host}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindHostResponse EndFindHost(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindHostResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindRevisionForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindRevisionResponse FindRevisionForLane(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> revision_id, string revision, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane) {
            object[] results = this.Invoke("FindRevisionForLane", new object[] {
                        login,
                        revision_id,
                        revision,
                        lane_id,
                        lane});
            return ((FindRevisionResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindRevisionForLane(WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindRevisionForLane", new object[] {
                        login,
                        revision_id,
                        revision,
                        lane_id,
                        lane}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindRevisionResponse EndFindRevisionForLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindRevisionResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindRevisionResponse FindRevision(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> revision_id, string revision) {
            object[] results = this.Invoke("FindRevision", new object[] {
                        login,
                        revision_id,
                        revision});
            return ((FindRevisionResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindRevision(WebServiceLogin login, System.Nullable<int> revision_id, string revision, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindRevision", new object[] {
                        login,
                        revision_id,
                        revision}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindRevisionResponse EndFindRevision(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindRevisionResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindLaneResponse FindLane(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane) {
            object[] results = this.Invoke("FindLane", new object[] {
                        login,
                        lane_id,
                        lane});
            return ((FindLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindLane(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindLane", new object[] {
                        login,
                        lane_id,
                        lane}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindLaneResponse EndFindLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLaneWithDependencies", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindLaneWithDependenciesResponse FindLaneWithDependencies(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane) {
            object[] results = this.Invoke("FindLaneWithDependencies", new object[] {
                        login,
                        lane_id,
                        lane});
            return ((FindLaneWithDependenciesResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindLaneWithDependencies(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindLaneWithDependencies", new object[] {
                        login,
                        lane_id,
                        lane}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindLaneWithDependenciesResponse EndFindLaneWithDependencies(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindLaneWithDependenciesResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLane(WebServiceLogin login, DBLane lane) {
            this.Invoke("EditLane", new object[] {
                        login,
                        lane});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditLane(WebServiceLogin login, DBLane lane, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditLane", new object[] {
                        login,
                        lane}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneWithTags", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneWithTags(WebServiceLogin login, DBLane lane, string[] tags) {
            this.Invoke("EditLaneWithTags", new object[] {
                        login,
                        lane,
                        tags});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditLaneWithTags(WebServiceLogin login, DBLane lane, string[] tags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditLaneWithTags", new object[] {
                        login,
                        lane,
                        tags}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditLaneWithTags(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditHost(WebServiceLogin login, DBHost host) {
            this.Invoke("EditHost", new object[] {
                        login,
                        host});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditHost(WebServiceLogin login, DBHost host, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditHost", new object[] {
                        login,
                        host}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditHost(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditHostWithPassword", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditHostWithPassword(WebServiceLogin login, DBHost host, string password) {
            this.Invoke("EditHostWithPassword", new object[] {
                        login,
                        host,
                        password});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditHostWithPassword(WebServiceLogin login, DBHost host, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditHostWithPassword", new object[] {
                        login,
                        host,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditHostWithPassword(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewLaneData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewLaneDataResponse GetViewLaneData(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> revision_id, string revision) {
            object[] results = this.Invoke("GetViewLaneData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision});
            return ((GetViewLaneDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewLaneData(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewLaneData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetViewLaneDataResponse EndGetViewLaneData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetViewLaneDataResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewLaneData2", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewLaneDataResponse GetViewLaneData2(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> revision_id, string revision, bool include_hidden_files) {
            object[] results = this.Invoke("GetViewLaneData2", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision,
                        include_hidden_files});
            return ((GetViewLaneDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewLaneData2(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> revision_id, string revision, bool include_hidden_files, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewLaneData2", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        revision_id,
                        revision,
                        include_hidden_files}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetViewLaneDataResponse EndGetViewLaneData2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetViewLaneDataResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageData(WebServiceLogin login, int limit, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id) {
            object[] results = this.Invoke("GetFrontPageData", new object[] {
                        login,
                        limit,
                        lane,
                        lane_id});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFrontPageData(WebServiceLogin login, int limit, string lane, System.Nullable<int> lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFrontPageData", new object[] {
                        login,
                        limit,
                        lane,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public FrontPageResponse EndGetFrontPageData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageData2", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageData2(WebServiceLogin login, int limit, string[] lanes, int[] lane_ids) {
            object[] results = this.Invoke("GetFrontPageData2", new object[] {
                        login,
                        limit,
                        lanes,
                        lane_ids});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFrontPageData2(WebServiceLogin login, int limit, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFrontPageData2", new object[] {
                        login,
                        limit,
                        lanes,
                        lane_ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public FrontPageResponse EndGetFrontPageData2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageData3", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageData3(WebServiceLogin login, int page_size, int page, string[] lanes, int[] lane_ids) {
            object[] results = this.Invoke("GetFrontPageData3", new object[] {
                        login,
                        page_size,
                        page,
                        lanes,
                        lane_ids});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFrontPageData3(WebServiceLogin login, int page_size, int page, string[] lanes, int[] lane_ids, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFrontPageData3", new object[] {
                        login,
                        page_size,
                        page,
                        lanes,
                        lane_ids}, callback, asyncState);
        }
        
        /// <remarks/>
        public FrontPageResponse EndGetFrontPageData3(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageData4", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageData4(WebServiceLogin login, int page_size, int page, string[] lanes, int[] lane_ids, int latest_days) {
            object[] results = this.Invoke("GetFrontPageData4", new object[] {
                        login,
                        page_size,
                        page,
                        lanes,
                        lane_ids,
                        latest_days});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFrontPageData4(WebServiceLogin login, int page_size, int page, string[] lanes, int[] lane_ids, int latest_days, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFrontPageData4", new object[] {
                        login,
                        page_size,
                        page,
                        lanes,
                        lane_ids,
                        latest_days}, callback, asyncState);
        }
        
        /// <remarks/>
        public FrontPageResponse EndGetFrontPageData4(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFrontPageDataWithTags", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FrontPageResponse GetFrontPageDataWithTags(WebServiceLogin login, int page_size, int page, string[] lanes, int[] lane_ids, int latest_days, string[] tags) {
            object[] results = this.Invoke("GetFrontPageDataWithTags", new object[] {
                        login,
                        page_size,
                        page,
                        lanes,
                        lane_ids,
                        latest_days,
                        tags});
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFrontPageDataWithTags(WebServiceLogin login, int page_size, int page, string[] lanes, int[] lane_ids, int latest_days, string[] tags, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFrontPageDataWithTags", new object[] {
                        login,
                        page_size,
                        page,
                        lanes,
                        lane_ids,
                        latest_days,
                        tags}, callback, asyncState);
        }
        
        /// <remarks/>
        public FrontPageResponse EndGetFrontPageDataWithTags(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FrontPageResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLanes", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLanesResponse GetLanes(WebServiceLogin login) {
            object[] results = this.Invoke("GetLanes", new object[] {
                        login});
            return ((GetLanesResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLanes(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLanes", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetLanesResponse EndGetLanes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetLanesResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetHostLanes", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHostLanesResponse GetHostLanes(WebServiceLogin login) {
            object[] results = this.Invoke("GetHostLanes", new object[] {
                        login});
            return ((GetHostLanesResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostLanes(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostLanes", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetHostLanesResponse EndGetHostLanes(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetHostLanesResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetHosts", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHostsResponse GetHosts(WebServiceLogin login) {
            object[] results = this.Invoke("GetHosts", new object[] {
                        login});
            return ((GetHostsResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHosts(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHosts", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetHostsResponse EndGetHosts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetHostsResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetHostStatus", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetHostStatusResponse GetHostStatus(WebServiceLogin login) {
            object[] results = this.Invoke("GetHostStatus", new object[] {
                        login});
            return ((GetHostStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetHostStatus(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetHostStatus", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetHostStatusResponse EndGetHostStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetHostStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLeftTreeData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLeftTreeDataResponse GetLeftTreeData(WebServiceLogin login) {
            object[] results = this.Invoke("GetLeftTreeData", new object[] {
                        login});
            return ((GetLeftTreeDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLeftTreeData(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLeftTreeData", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetLeftTreeDataResponse EndGetLeftTreeData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetLeftTreeDataResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetRevisions", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetRevisionsResponse GetRevisions(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, int limit, int offset) {
            object[] results = this.Invoke("GetRevisions", new object[] {
                        login,
                        lane_id,
                        lane,
                        limit,
                        offset});
            return ((GetRevisionsResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRevisions(WebServiceLogin login, System.Nullable<int> lane_id, string lane, int limit, int offset, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRevisions", new object[] {
                        login,
                        lane_id,
                        lane,
                        limit,
                        offset}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetRevisionsResponse EndGetRevisions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetRevisionsResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetCommands", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetCommandsResponse GetCommands(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("GetCommands", new object[] {
                        login,
                        lane_id});
            return ((GetCommandsResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCommands(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCommands", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetCommandsResponse EndGetCommands(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetCommandsResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/CloneLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CloneLane(WebServiceLogin login, int lane_id, string new_name, bool copy_files) {
            object[] results = this.Invoke("CloneLane", new object[] {
                        login,
                        lane_id,
                        new_name,
                        copy_files});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloneLane(WebServiceLogin login, int lane_id, string new_name, bool copy_files, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloneLane", new object[] {
                        login,
                        lane_id,
                        new_name,
                        copy_files}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndCloneLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteLane(WebServiceLogin login, int lane_id) {
            this.Invoke("DeleteLane", new object[] {
                        login,
                        lane_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteLane(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteLane", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteLane(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddLane(WebServiceLogin login, string lane) {
            object[] results = this.Invoke("AddLane", new object[] {
                        login,
                        lane});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLane(WebServiceLogin login, string lane, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLane", new object[] {
                        login,
                        lane}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteHost(WebServiceLogin login, int host_id) {
            this.Invoke("DeleteHost", new object[] {
                        login,
                        host_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteHost(WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteHost", new object[] {
                        login,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteHost(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddHost(WebServiceLogin login, string host) {
            object[] results = this.Invoke("AddHost", new object[] {
                        login,
                        host});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddHost(WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddHost", new object[] {
                        login,
                        host}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddHost(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/IgnoreRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IgnoreRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.Invoke("IgnoreRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIgnoreRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IgnoreRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndIgnoreRevision(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ClearRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.Invoke("ClearRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndClearRevision(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RescheduleRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RescheduleRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.Invoke("RescheduleRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRescheduleRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RescheduleRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRescheduleRevision(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ClearAllWorkForHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse ClearAllWorkForHost(WebServiceLogin login, int host_id) {
            object[] results = this.Invoke("ClearAllWorkForHost", new object[] {
                        login,
                        host_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearAllWorkForHost(WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearAllWorkForHost", new object[] {
                        login,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndClearAllWorkForHost(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ClearAllWorkForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse ClearAllWorkForLane(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("ClearAllWorkForLane", new object[] {
                        login,
                        lane_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearAllWorkForLane(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearAllWorkForLane", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndClearAllWorkForLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteAllWorkForHost", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse DeleteAllWorkForHost(WebServiceLogin login, int host_id) {
            object[] results = this.Invoke("DeleteAllWorkForHost", new object[] {
                        login,
                        host_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAllWorkForHost(WebServiceLogin login, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAllWorkForHost", new object[] {
                        login,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndDeleteAllWorkForHost(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteAllWorkForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse DeleteAllWorkForLane(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("DeleteAllWorkForLane", new object[] {
                        login,
                        lane_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAllWorkForLane(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAllWorkForLane", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndDeleteAllWorkForLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteAllRevisionsForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse DeleteAllRevisionsForLane(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("DeleteAllRevisionsForLane", new object[] {
                        login,
                        lane_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAllRevisionsForLane(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAllRevisionsForLane", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndDeleteAllRevisionsForLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AbortRevision", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AbortRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id) {
            this.Invoke("AbortRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAbortRevision(WebServiceLogin login, int lane_id, int host_id, int revision_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AbortRevision", new object[] {
                        login,
                        lane_id,
                        host_id,
                        revision_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAbortRevision(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ClearWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ClearWork(WebServiceLogin login, int work_id) {
            this.Invoke("ClearWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearWork(WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearWork", new object[] {
                        login,
                        work_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndClearWork(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AbortWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AbortWork(WebServiceLogin login, int work_id) {
            this.Invoke("AbortWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAbortWork(WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AbortWork", new object[] {
                        login,
                        work_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAbortWork(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/PauseWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PauseWork(WebServiceLogin login, int work_id) {
            this.Invoke("PauseWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPauseWork(WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PauseWork", new object[] {
                        login,
                        work_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPauseWork(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ResumeWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResumeWork(WebServiceLogin login, int work_id) {
            this.Invoke("ResumeWork", new object[] {
                        login,
                        work_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginResumeWork(WebServiceLogin login, int work_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ResumeWork", new object[] {
                        login,
                        work_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndResumeWork(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewTableData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewTableDataResponse GetViewTableData(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, int page, int page_size) {
            object[] results = this.Invoke("GetViewTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        page,
                        page_size});
            return ((GetViewTableDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewTableData(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, int page, int page_size, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        page,
                        page_size}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetViewTableDataResponse EndGetViewTableData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetViewTableDataResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewWorkTableData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewWorkTableDataResponse GetViewWorkTableData(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string host, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> command_id, string command) {
            object[] results = this.Invoke("GetViewWorkTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command});
            return ((GetViewWorkTableDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewWorkTableData(WebServiceLogin login, System.Nullable<int> lane_id, string lane, System.Nullable<int> host_id, string host, System.Nullable<int> command_id, string command, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewWorkTableData", new object[] {
                        login,
                        lane_id,
                        lane,
                        host_id,
                        host,
                        command_id,
                        command}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetViewWorkTableDataResponse EndGetViewWorkTableData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetViewWorkTableDataResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetLaneFileForEdit", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetLaneFileForEditResponse GetLaneFileForEdit(WebServiceLogin login, int lanefile_id) {
            object[] results = this.Invoke("GetLaneFileForEdit", new object[] {
                        login,
                        lanefile_id});
            return ((GetLaneFileForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLaneFileForEdit(WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLaneFileForEdit", new object[] {
                        login,
                        lanefile_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetLaneFileForEditResponse EndGetLaneFileForEdit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetLaneFileForEditResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditLaneFile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditLaneFile(WebServiceLogin login, DBLanefile lanefile) {
            this.Invoke("EditLaneFile", new object[] {
                        login,
                        lanefile});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditLaneFile(WebServiceLogin login, DBLanefile lanefile, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditLaneFile", new object[] {
                        login,
                        lanefile}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditLaneFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetViewLaneFileHistoryData", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetViewLaneFileHistoryDataResponse GetViewLaneFileHistoryData(WebServiceLogin login, int lanefile_id) {
            object[] results = this.Invoke("GetViewLaneFileHistoryData", new object[] {
                        login,
                        lanefile_id});
            return ((GetViewLaneFileHistoryDataResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetViewLaneFileHistoryData(WebServiceLogin login, int lanefile_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetViewLaneFileHistoryData", new object[] {
                        login,
                        lanefile_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetViewLaneFileHistoryDataResponse EndGetViewLaneFileHistoryData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetViewLaneFileHistoryDataResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetUsers", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetUsersResponse GetUsers(WebServiceLogin login) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        login});
            return ((GetUsersResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUsers(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUsers", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetUsersResponse EndGetUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetUsersResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteUser", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse DeleteUser(WebServiceLogin login, int id) {
            object[] results = this.Invoke("DeleteUser", new object[] {
                        login,
                        id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUser(WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUser", new object[] {
                        login,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndDeleteUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddUserEmail", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse AddUserEmail(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> id, string username, string email) {
            object[] results = this.Invoke("AddUserEmail", new object[] {
                        login,
                        id,
                        username,
                        email});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddUserEmail(WebServiceLogin login, System.Nullable<int> id, string username, string email, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddUserEmail", new object[] {
                        login,
                        id,
                        username,
                        email}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndAddUserEmail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveUserEmail", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse RemoveUserEmail(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> id, string username, string email) {
            object[] results = this.Invoke("RemoveUserEmail", new object[] {
                        login,
                        id,
                        username,
                        email});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveUserEmail(WebServiceLogin login, System.Nullable<int> id, string username, string email, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveUserEmail", new object[] {
                        login,
                        id,
                        username,
                        email}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndRemoveUserEmail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditUser", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse EditUser(WebServiceLogin login, DBPerson user) {
            object[] results = this.Invoke("EditUser", new object[] {
                        login,
                        user});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditUser(WebServiceLogin login, DBPerson user, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditUser", new object[] {
                        login,
                        user}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndEditUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetUser", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetUserResponse GetUser(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> id, string username) {
            object[] results = this.Invoke("GetUser", new object[] {
                        login,
                        id,
                        username});
            return ((GetUserResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUser(WebServiceLogin login, System.Nullable<int> id, string username, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUser", new object[] {
                        login,
                        id,
                        username}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetUserResponse EndGetUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetUserResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetUploadPort", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUploadPort() {
            object[] results = this.Invoke("GetUploadPort", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUploadPort(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUploadPort", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetUploadPort(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddEnvironmentVariable", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddEnvironmentVariable(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> host_id, string name, string value) {
            object[] results = this.Invoke("AddEnvironmentVariable", new object[] {
                        login,
                        lane_id,
                        host_id,
                        name,
                        value});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddEnvironmentVariable(WebServiceLogin login, System.Nullable<int> lane_id, System.Nullable<int> host_id, string name, string value, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddEnvironmentVariable", new object[] {
                        login,
                        lane_id,
                        host_id,
                        name,
                        value}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddEnvironmentVariable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditEnvironmentVariable", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EditEnvironmentVariable(WebServiceLogin login, DBEnvironmentVariable variable) {
            this.Invoke("EditEnvironmentVariable", new object[] {
                        login,
                        variable});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditEnvironmentVariable(WebServiceLogin login, DBEnvironmentVariable variable, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditEnvironmentVariable", new object[] {
                        login,
                        variable}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEditEnvironmentVariable(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteEnvironmentVariable", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteEnvironmentVariable(WebServiceLogin login, int variable_id) {
            this.Invoke("DeleteEnvironmentVariable", new object[] {
                        login,
                        variable_id});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteEnvironmentVariable(WebServiceLogin login, int variable_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteEnvironmentVariable", new object[] {
                        login,
                        variable_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteEnvironmentVariable(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UploadCompressedFile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadCompressedFile(WebServiceLogin login, DBWork work, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] contents, bool hidden, string compressed_mime) {
            this.Invoke("UploadCompressedFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden,
                        compressed_mime});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadCompressedFile(WebServiceLogin login, DBWork work, string filename, byte[] contents, bool hidden, string compressed_mime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadCompressedFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden,
                        compressed_mime}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUploadCompressedFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UploadLinks", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadLinks(WebServiceLogin login, DBWork work, string[] links) {
            this.Invoke("UploadLinks", new object[] {
                        login,
                        work,
                        links});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadLinks(WebServiceLogin login, DBWork work, string[] links, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadLinks", new object[] {
                        login,
                        work,
                        links}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUploadLinks(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/UploadFile", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFile(WebServiceLogin login, DBWork work, string filename, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] contents, bool hidden) {
            this.Invoke("UploadFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadFile(WebServiceLogin login, DBWork work, string filename, byte[] contents, bool hidden, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadFile", new object[] {
                        login,
                        work,
                        filename,
                        contents,
                        hidden}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUploadFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetWorkState", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DBState GetWorkState(WebServiceLogin login, DBWork work) {
            object[] results = this.Invoke("GetWorkState", new object[] {
                        login,
                        work});
            return ((DBState)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWorkState(WebServiceLogin login, DBWork work, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWorkState", new object[] {
                        login,
                        work}, callback, asyncState);
        }
        
        /// <remarks/>
        public DBState EndGetWorkState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DBState)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetFilesForWork", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetFilesForWorkResponse GetFilesForWork(WebServiceLogin login, int revisionwork_id, int command_id, string filename) {
            object[] results = this.Invoke("GetFilesForWork", new object[] {
                        login,
                        revisionwork_id,
                        command_id,
                        filename});
            return ((GetFilesForWorkResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFilesForWork(WebServiceLogin login, int revisionwork_id, int command_id, string filename, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFilesForWork", new object[] {
                        login,
                        revisionwork_id,
                        command_id,
                        filename}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetFilesForWorkResponse EndGetFilesForWork(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetFilesForWorkResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ReportBuildState", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReportBuildStateResponse ReportBuildState(WebServiceLogin login, DBWork work) {
            object[] results = this.Invoke("ReportBuildState", new object[] {
                        login,
                        work});
            return ((ReportBuildStateResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReportBuildState(WebServiceLogin login, DBWork work, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportBuildState", new object[] {
                        login,
                        work}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReportBuildStateResponse EndReportBuildState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReportBuildStateResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetRevisionWorkForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetRevisionWorkForLaneResponse GetRevisionWorkForLane(WebServiceLogin login, int lane_id, int revision_id, int host_id) {
            object[] results = this.Invoke("GetRevisionWorkForLane", new object[] {
                        login,
                        lane_id,
                        revision_id,
                        host_id});
            return ((GetRevisionWorkForLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRevisionWorkForLane(WebServiceLogin login, int lane_id, int revision_id, int host_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRevisionWorkForLane", new object[] {
                        login,
                        lane_id,
                        revision_id,
                        host_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetRevisionWorkForLaneResponse EndGetRevisionWorkForLane(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetRevisionWorkForLaneResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ReportBuildBotStatus", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReportBuildBotStatusResponse ReportBuildBotStatus(WebServiceLogin login, BuildBotStatus status) {
            object[] results = this.Invoke("ReportBuildBotStatus", new object[] {
                        login,
                        status});
            return ((ReportBuildBotStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReportBuildBotStatus(WebServiceLogin login, BuildBotStatus status, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportBuildBotStatus", new object[] {
                        login,
                        status}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReportBuildBotStatusResponse EndReportBuildBotStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReportBuildBotStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetBuildBotStatus", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetBuildBotStatusResponse GetBuildBotStatus(WebServiceLogin login) {
            object[] results = this.Invoke("GetBuildBotStatus", new object[] {
                        login});
            return ((GetBuildBotStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBuildBotStatus(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBuildBotStatus", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetBuildBotStatusResponse EndGetBuildBotStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetBuildBotStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetBuildInfo", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetBuildInfoResponse GetBuildInfo(WebServiceLogin login, string host) {
            object[] results = this.Invoke("GetBuildInfo", new object[] {
                        login,
                        host});
            return ((GetBuildInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBuildInfo(WebServiceLogin login, string host, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBuildInfo", new object[] {
                        login,
                        host}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetBuildInfoResponse EndGetBuildInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetBuildInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetBuildInfoMultiple", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetBuildInfoResponse GetBuildInfoMultiple(WebServiceLogin login, string host, bool multiple_work) {
            object[] results = this.Invoke("GetBuildInfoMultiple", new object[] {
                        login,
                        host,
                        multiple_work});
            return ((GetBuildInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetBuildInfoMultiple(WebServiceLogin login, string host, bool multiple_work, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetBuildInfoMultiple", new object[] {
                        login,
                        host,
                        multiple_work}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetBuildInfoResponse EndGetBuildInfoMultiple(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetBuildInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/FindLatestWorkFileId", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> FindLatestWorkFileId(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful) {
            object[] results = this.Invoke("FindLatestWorkFileId", new object[] {
                        login,
                        lane_id,
                        lane,
                        filename,
                        completed,
                        successful});
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindLatestWorkFileId(WebServiceLogin login, System.Nullable<int> lane_id, string lane, string filename, bool completed, bool successful, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindLatestWorkFileId", new object[] {
                        login,
                        lane_id,
                        lane,
                        filename,
                        completed,
                        successful}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Nullable<int> EndFindLatestWorkFileId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditIdentity", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse EditIdentity(WebServiceLogin login, DBIrcIdentity irc_identity, DBEmailIdentity email_identity) {
            object[] results = this.Invoke("EditIdentity", new object[] {
                        login,
                        irc_identity,
                        email_identity});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditIdentity(WebServiceLogin login, DBIrcIdentity irc_identity, DBEmailIdentity email_identity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditIdentity", new object[] {
                        login,
                        irc_identity,
                        email_identity}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndEditIdentity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveIdentity", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse RemoveIdentity(WebServiceLogin login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> irc_identity, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> email_identity) {
            object[] results = this.Invoke("RemoveIdentity", new object[] {
                        login,
                        irc_identity,
                        email_identity});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveIdentity(WebServiceLogin login, System.Nullable<int> irc_identity, System.Nullable<int> email_identity, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveIdentity", new object[] {
                        login,
                        irc_identity,
                        email_identity}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndRemoveIdentity(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetIdentities", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetIdentitiesResponse GetIdentities(WebServiceLogin login) {
            object[] results = this.Invoke("GetIdentities", new object[] {
                        login});
            return ((GetIdentitiesResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIdentities(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIdentities", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetIdentitiesResponse EndGetIdentities(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetIdentitiesResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/EditNotification", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse EditNotification(WebServiceLogin login, DBNotification notification) {
            object[] results = this.Invoke("EditNotification", new object[] {
                        login,
                        notification});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEditNotification(WebServiceLogin login, DBNotification notification, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EditNotification", new object[] {
                        login,
                        notification}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndEditNotification(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveNotification", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse RemoveNotification(WebServiceLogin login, int id) {
            object[] results = this.Invoke("RemoveNotification", new object[] {
                        login,
                        id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveNotification(WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveNotification", new object[] {
                        login,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndRemoveNotification(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetNotifications", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetNotificationsResponse GetNotifications(WebServiceLogin login) {
            object[] results = this.Invoke("GetNotifications", new object[] {
                        login});
            return ((GetNotificationsResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNotifications(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNotifications", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetNotificationsResponse EndGetNotifications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetNotificationsResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddLaneNotification", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse AddLaneNotification(WebServiceLogin login, int lane_id, int notification_id) {
            object[] results = this.Invoke("AddLaneNotification", new object[] {
                        login,
                        lane_id,
                        notification_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLaneNotification(WebServiceLogin login, int lane_id, int notification_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLaneNotification", new object[] {
                        login,
                        lane_id,
                        notification_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndAddLaneNotification(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/RemoveLaneNotification", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse RemoveLaneNotification(WebServiceLogin login, int id) {
            object[] results = this.Invoke("RemoveLaneNotification", new object[] {
                        login,
                        id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveLaneNotification(WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveLaneNotification", new object[] {
                        login,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndRemoveLaneNotification(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/AddRelease", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse AddRelease(WebServiceLogin login, DBRelease release) {
            object[] results = this.Invoke("AddRelease", new object[] {
                        login,
                        release});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddRelease(WebServiceLogin login, DBRelease release, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddRelease", new object[] {
                        login,
                        release}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndAddRelease(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetReleases", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetReleasesResponse GetReleases(WebServiceLogin login) {
            object[] results = this.Invoke("GetReleases", new object[] {
                        login});
            return ((GetReleasesResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReleases(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReleases", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetReleasesResponse EndGetReleases(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetReleasesResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/DeleteRelease", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse DeleteRelease(WebServiceLogin login, int id) {
            object[] results = this.Invoke("DeleteRelease", new object[] {
                        login,
                        id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteRelease(WebServiceLogin login, int id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteRelease", new object[] {
                        login,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndDeleteRelease(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/MarkAsDontBuild", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebServiceResponse MarkAsDontBuild(WebServiceLogin login, int lane_id) {
            object[] results = this.Invoke("MarkAsDontBuild", new object[] {
                        login,
                        lane_id});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMarkAsDontBuild(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MarkAsDontBuild", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebServiceResponse EndMarkAsDontBuild(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ExecuteScheduler", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteScheduler(WebServiceLogin login, bool forcefullupdate) {
            this.Invoke("ExecuteScheduler", new object[] {
                        login,
                        forcefullupdate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteScheduler(WebServiceLogin login, bool forcefullupdate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteScheduler", new object[] {
                        login,
                        forcefullupdate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteScheduler(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ExecuteSchedulerForRepositories", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteSchedulerForRepositories(WebServiceLogin login, string[] repositories) {
            this.Invoke("ExecuteSchedulerForRepositories", new object[] {
                        login,
                        repositories});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteSchedulerForRepositories(WebServiceLogin login, string[] repositories, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSchedulerForRepositories", new object[] {
                        login,
                        repositories}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteSchedulerForRepositories(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ExecuteSchedulerForLane", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteSchedulerForLane(WebServiceLogin login, int lane_id) {
            object [] results = this.Invoke("ExecuteSchedulerForLane", new object[] {
                        login,
                        lane_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteSchedulerForLane(WebServiceLogin login, int lane_id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteSchedulerForLane", new object[] {
                        login,
                        lane_id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndExecuteSchedulerForLane(System.IAsyncResult asyncResult) {
            object [] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/ExecuteDeletionDirectives", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecuteDeletionDirectives(WebServiceLogin login) {
            this.Invoke("ExecuteDeletionDirectives", new object[] {
                        login});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecuteDeletionDirectives(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExecuteDeletionDirectives", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecuteDeletionDirectives(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://monkeywrench.novell.com/GetAdminInfo", RequestNamespace="http://monkeywrench.novell.com/", ResponseNamespace="http://monkeywrench.novell.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetAdminInfoResponse GetAdminInfo(WebServiceLogin login) {
            object[] results = this.Invoke("GetAdminInfo", new object[] {
                        login});
            return ((GetAdminInfoResponse)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAdminInfo(WebServiceLogin login, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAdminInfo", new object[] {
                        login}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetAdminInfoResponse EndGetAdminInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetAdminInfoResponse)(results[0]));
        }
    }
}
